name: CodeQL Analysis, Security Scans and Deploy to Amazon ECS

on:
  push:
    branches:
      - main

env:
  AWS_REGION: ap-south-1                   # set this to your preferred AWS region
  ECR_REPOSITORY: webapp-hospital          # Amazon ECR repository name
  ECS_SERVICE: web-ecs-service             # Amazon ECS service name
  ECS_CLUSTER: web-ecs-cluster             # Amazon ECS cluster name
  ECS_TASK_DEFINITION: ecs-task-revision36.json # ECS task definition file
  CONTAINER_NAME: web-app                  # ECS container name

permissions:
  actions: read
  contents: read
  security-events: write

jobs:
  snyk:
    name: Snyk Scan (SCA)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Monitor project in Snyk dashboard
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          command: monitor

      - name: Run Snyk test and save SARIF report
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          command: test
          args: --sarif-file-output=snyk.sarif --fail-on=all

      - name: Upload SARIF to GitHub Code Scanning
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: snyk.sarif

  codeQL:
    name: CodeQL Analysis (SAST)
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        language: [ 'javascript' ] # Node.js language
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: ${{ matrix.language }}

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3

  dast:
    name: Dynamic Application Security Testing (DAST)
    runs-on: ubuntu-latest
    needs: [snyk, codeQL]   # Run after Snyk & CodeQL
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # Start the app container for testing
      - name: Build and run application
        run: |
          docker build -t webapp-test .
          docker run -d -p 8080:8080 --name webapp webapp-test
          sleep 25  # wait for app to be ready

      # Run OWASP ZAP baseline scan
      - name: Run OWASP ZAP Baseline Scan
        uses: zaproxy/action-baseline@v0.10.0
        with:
          target: "http://localhost:8080"
          cmd_options: "-a"

      # Upload ZAP HTML report
      - name: Upload ZAP HTML report
        uses: actions/upload-artifact@v4
        with:
          name: zap-report
          path: report_html.html

      # (Optional) Fail pipeline on warnings/high issues
      - name: Run OWASP ZAP Full Scan
        uses: zaproxy/action-full-scan@v0.10.0
        with:
          target: "http://localhost:8080"
          fail_on_warn: true

      # (Optional) Upload SARIF to GitHub Security tab
      - name: Upload ZAP SARIF results
        if: always()
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: zap-results.sarif

  deploy:
    name: Deploy to Amazon ECS
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      issues: write
      security-events: write
    environment: production
    needs: [dast]   # Deploy only if DAST passes

    steps:
      - name: Approval
        uses: trstringer/manual-approval@v1
        with:
          secret: ${{ github.TOKEN }}
          approvers: Kulunu98
          minimum-approvals: 1
          issue-title: "Deploying v1.3.5 to production"
          issue-body: "Please approve or deny the deployment of version v1.3.5."
          timeout-minutes: 3       

      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@0e613a0980cbf65ed5b322eb7a1e075d28913a83
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@62f4f872db3836360b72999f4b87f1ff13310f3a

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@0.28.0
        with:
          image-ref: ${{ steps.build-image.outputs.image }}
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ${{ env.ECS_TASK_DEFINITION }}
          container-name: ${{ env.CONTAINER_NAME }}
          image: ${{ steps.build-image.outputs.image }}

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v2
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true
