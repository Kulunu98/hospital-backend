name: CodeQL Analysis, Security Scans and Deploy to Amazon ECS

on:
  push:
    branches:
      - main

# Environment variables for AWS and ECS deployment
env:
  AWS_REGION: ap-south-1                   # AWS region
  ECR_REPOSITORY: webapp-hospital          # Amazon ECR repository name
  ECS_SERVICE: web-ecs-service             # Amazon ECS service name
  ECS_CLUSTER: web-ecs-cluster             # Amazon ECS cluster name
  ECS_TASK_DEFINITION: ecs-task-revision36.json # ECS task definition file
  CONTAINER_NAME: web-app                  # Container name in ECS task

# Permissions for jobs
permissions:
  actions: read
  contents: read
  security-events: write

# ----------------------------
# Job 1: Snyk Static & Dependency Analysis
# ----------------------------
jobs:
  snyk:
    name: Snyk SCA Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # Monitor project dependencies in Snyk dashboard
      - name: Monitor project in Snyk
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          command: monitor

      # Run Snyk test and save SARIF report
      - name: Run Snyk test and save SARIF report
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          command: test
          args: --sarif-file-output=snyk.sarif --fail-on=all

      # Upload SARIF report to GitHub Code Scanning
      - name: Upload SARIF to GitHub Code Scanning
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: snyk.sarif

# ----------------------------
# Job 2: CodeQL Static Analysis
# ----------------------------
  codeQL:
    name: CodeQL Static Analysis
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        language: [ 'javascript' ] # Node.js languages

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # Initialize CodeQL
      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: ${{ matrix.language }}

      # Perform CodeQL analysis
      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3

# ----------------------------
# Job 3: DAST - OWASP ZAP Dynamic Analysis
# ----------------------------
  dast:
    name: OWASP ZAP Dynamic Analysis
    runs-on: ubuntu-latest
    needs: [snyk, codeQL]  # Run only after Snyk & CodeQL succeed

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # Build Docker image for the application
      - name: Build Docker image
        run: docker build -t webapp-test .

      # Create dedicated Docker network so ZAP can resolve app by container name
      - name: Create Docker network
        run: docker network create zapnet || true

      # Run app container on custom network
      - name: Run application container
        run: |
          docker run -d --name webapp --network zapnet -p 8080:8080 webapp-test
          sleep 25  # Wait until the app is fully ready

      # Prepare writable folder for ZAP reports to avoid permission issues
      - name: Prepare reports folder
        run: |
          mkdir -p $PWD/zap-reports
          chmod 777 $PWD/zap-reports

      # Run OWASP ZAP baseline scan (passive scan)
      - name: Run OWASP ZAP Baseline Scan
        uses: zaproxy/action-baseline@v0.10.0
        with:
          target: "http://webapp:8080"           # App reachable via custom network
          cmd_options: "-a"
          allow_issue_writing: false
          docker_name: "ghcr.io/zaproxy/zaproxy:stable"
        env:
          REPORTS_DIR: $PWD/zap-reports        # Mount reports folder

      # Upload human-readable HTML report as artifact
      - name: Upload ZAP HTML report
        uses: actions/upload-artifact@v4
        with:
          name: zap-report
          path: zap-reports/report_html.html

      # Upload SARIF report to GitHub Security tab
      - name: Upload ZAP SARIF results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: zap-reports/report_json.json

# ----------------------------
# Job 4: Deployment to Amazon ECS
# ----------------------------
  deploy:
    name: Deploy to Amazon ECS
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      issues: write
      security-events: write
    environment: production
    needs: [dast]   # Deploy only if DAST passes

    steps:
      # Require manual approval before deployment
      - name: Approval
        uses: trstringer/manual-approval@v1
        with:
          secret: ${{ github.TOKEN }}
          approvers: Kulunu98
          minimum-approvals: 1
          issue-title: "Deploying v1.3.5 to production"
          issue-body: "Please approve or deny the deployment of version v1.3.5."
          timeout-minutes: 3       

      - name: Checkout
        uses: actions/checkout@v4

      # Configure AWS credentials
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      # Authenticate to Amazon ECR
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      # Build, tag and push Docker image to ECR
      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

      # Run Trivy vulnerability scan
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@v0.28.0
        with:
          image-ref: ${{ steps.build-image.outputs.image }}
          format: 'sarif'
          output: 'trivy-results.sarif'

      # Upload Trivy SARIF results
      - name: Upload Trivy SARIF
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

      # Update ECS task definition with new image
      - name: Fill in new image ID in ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ${{ env.ECS_TASK_DEFINITION }}
          container-name: ${{ env.CONTAINER_NAME }}
          image: ${{ steps.build-image.outputs.image }}

      # Deploy ECS task definition
      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v2
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true
