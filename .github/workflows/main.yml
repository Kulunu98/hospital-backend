name: CodeQL Analysis, Security Scans and Deploy to Amazon ECS

on:
  push:
    branches:
      - main

# ----------------------------
# Environment variables
# ----------------------------
env:
  AWS_REGION: ap-south-1                     # AWS region for ECS/ECR
  ECR_REPOSITORY: webapp-hospital            # Amazon ECR repository name
  ECS_SERVICE: web-ecs-service                # ECS service name to deploy
  ECS_CLUSTER: web-ecs-cluster                # ECS cluster name
  ECS_TASK_DEFINITION: ecs-task-revision36.json  # Path to ECS task definition
  CONTAINER_NAME: web-app                      # Container name in ECS task definition

permissions:
  actions: read
  contents: read
  security-events: write

# ----------------------------
# Jobs
# ----------------------------

# ----------------------------
# 1️ Snyk Scan (Dependency & Vulnerability Analysis)
# ----------------------------
jobs:
  snyk:
    name: Snyk SCA Scan
    runs-on: ubuntu-latest
    steps:
      # Checkout the code so Snyk can scan it
      - name: Checkout code
        uses: actions/checkout@v4

      # Monitor project dependencies in Snyk dashboard
      - name: Monitor project in Snyk dashboard
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          command: monitor

      # Run Snyk test and save SARIF report for GitHub
      - name: Run Snyk test and save SARIF report
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          command: test
          args: --sarif-file-output=snyk.sarif --fail-on=all

      # Upload SARIF report to GitHub Security tab
      - name: Upload SARIF to GitHub Code Scanning
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: snyk.sarif

# ----------------------------
# 2️ CodeQL Static Analysis
# ----------------------------
  codeQL:
    name: CodeQL Analysis
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        language: [ 'javascript' ]   # Node.js code
    steps:
      # Checkout code
      - name: Checkout repository
        uses: actions/checkout@v4

      # Initialize CodeQL for selected language
      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: ${{ matrix.language }}

      # Run CodeQL static analysis
      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3

# ----------------------------
# 3️ DAST: OWASP ZAP Dynamic Analysis
# ----------------------------
  dast:
    name: OWASP ZAP Dynamic Analysis
    runs-on: ubuntu-latest
    needs: [snyk, codeQL]    # Run only after Snyk & CodeQL succeed
    steps:
      # Checkout code for Docker build
      - name: Checkout code
        uses: actions/checkout@v4

      # Build and run the application container
      - name: Build and run application
        run: |
          docker build -t webapp-test .
          docker run -d --name webapp -p 8080:8080 webapp-test
          # Wait until app responds on port 8080
          for i in {1..15}; do
            if curl -s http://localhost:8080 >/dev/null; then
              echo "App is up!"
              break
            fi
            echo "Waiting for app..."
            sleep 5
          done

      # Run ZAP baseline scan WITHOUT mounting GitHub workspace
      # This avoids permission denied errors for zap.yaml
      - name: Run OWASP ZAP Baseline Scan
        uses: zaproxy/action-baseline@v0.10.0
        with:
          target: "http://localhost:8080"    # Scan local container
          cmd_options: "-a"                  # Aggressive passive scan
          allow_issue_writing: false         # Do not automatically create GitHub issues
          docker_name: "ghcr.io/zaproxy/zaproxy:stable"
          use_internal_workspace: true       # FIX: prevents permission denied on zap.yaml

      # Copy ZAP reports from container to GitHub workspace
      - name: Copy ZAP reports
        run: |
          CONTAINER_ID=$(docker ps -q -f ancestor=ghcr.io/zaproxy/zaproxy:stable)
          docker cp $CONTAINER_ID:/zap/wrk/report_json.json ./report_json.json
          docker cp $CONTAINER_ID:/zap/wrk/report_md.md ./report_md.md
          docker cp $CONTAINER_ID:/zap/wrk/report_html.html ./report_html.html

      # Upload human-readable HTML report as artifact
      - name: Upload human-readable ZAP HTML report
        uses: actions/upload-artifact@v4
        with:
          name: zap-report
          path: report_html.html

      # Upload ZAP SARIF report to GitHub Security tab
      - name: Upload ZAP SARIF results
        if: always()
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: report_json.json

      # Cleanup application container
      - name: Cleanup
        run: docker rm -f webapp || true

# ----------------------------
# 4 Deployment to Amazon ECS
# ----------------------------
  deploy:
    name: Deploy to Amazon ECS
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      issues: write
      security-events: write
    environment: production
    needs: [dast]  # Deploy only if DAST passes
    steps:
      # Manual approval step before production deployment
      - name: Approval
        uses: trstringer/manual-approval@v1
        with:
          secret: ${{ github.TOKEN }}
          approvers: Kulunu98
          minimum-approvals: 1
          issue-title: "Deploying v1.3.5 to production"
          issue-body: "Please approve or deny the deployment of version v1.3.5."
          timeout-minutes: 3       

      # Checkout repository
      - name: Checkout
        uses: actions/checkout@v4

      # Configure AWS credentials
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      # Login to Amazon ECR
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      # Build, tag, and push Docker image to ECR
      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

      # Run Trivy vulnerability scan
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@v0.28.0
        with:
          image-ref: ${{ steps.build-image.outputs.image }}
          format: 'sarif'
          output: 'trivy-results.sarif'

      # Upload Trivy SARIF to GitHub Security tab
      - name: Upload Trivy SARIF
        if: always()
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'

      # Update ECS task definition with new image
      - name: Fill in the new image ID in the ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ${{ env.ECS_TASK_DEFINITION }}
          container-name: ${{ env.CONTAINER_NAME }}
          image: ${{ steps.build-image.outputs.image }}

      # Deploy ECS service
      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v2
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true
