name: CodeQL Analysis, Security Scans, DAST, and Deploy to Amazon ECS

# Trigger pipeline on push to main branch
on:
  push:
    branches:
      - main

# Global environment variables
env:
  AWS_REGION: ap-south-1                   # Your AWS region
  ECR_REPOSITORY: webapp-hospital          # ECR repository name
  ECS_SERVICE: web-ecs-service             # ECS service name
  ECS_CLUSTER: web-ecs-cluster             # ECS cluster name
  ECS_TASK_DEFINITION: ecs-task-revision36.json # ECS task definition file
  CONTAINER_NAME: web-app                  # ECS container name

# Set permissions for GitHub actions
permissions:
  actions: read
  contents: read
  security-events: write

jobs:
  # ==========================
  # Snyk Scan (SCA)
  # ==========================
  snyk:
    name: Snyk Scan (SCA)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Monitor project in Snyk
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          command: monitor

      - name: Run Snyk test
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          command: test
          args: --sarif-file-output=snyk.sarif --fail-on=all

      - name: Upload Snyk SARIF to GitHub
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: snyk.sarif

  # ==========================
  # CodeQL Analysis (SAST)
  # ==========================
  codeQL:
    name: CodeQL Analysis (SAST)
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        language: ['javascript']
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: ${{ matrix.language }}

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3

  # ==========================
  # DAST - OWASP ZAP
  # ==========================
  dast:
    name: Dynamic Application Security Testing (DAST)
    runs-on: ubuntu-latest
    needs: [snyk, codeQL]
    services:
      mongodb:
        image: mongo:5.0
        ports:
          - 27017:27017
        env:
          MONGO_INITDB_DATABASE: hospital_test
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Build application image
        run: docker build -t webapp-test .

      - name: Start application container
        run: |
          docker run -d \
            --name webapp \
            --network host \
            -e MONGO_URI="mongodb://127.0.0.1:27017/hospital_test" \
            -e NODE_ENV="test" \
            -e PORT="8080" \
            -e HOST="0.0.0.0" \
            webapp-test
          sleep 20
          if ! docker ps | grep webapp | grep "Up"; then
            echo "Container failed to start"
            docker logs webapp --tail 50
            exit 1
          fi

      - name: Wait for application to be ready
        run: |
          timeout=120
          elapsed=0
          while [ $elapsed -lt $timeout ]; do
            if curl -s http://localhost:8080 >/dev/null; then
              echo "Application is ready"
              break
            fi
            sleep 5
            elapsed=$((elapsed + 5))
          done
          if [ $elapsed -ge $timeout ]; then
            echo "Application did not start in $timeout seconds"
            docker logs webapp --tail 50
            exit 1
          fi

      # OWASP ZAP Baseline Scan (SARIF output)
      - name: OWASP ZAP Baseline Scan
        uses: zaproxy/action-baseline@v0.10.0
        with:
          target: "http://localhost:8080"
          cmd_options: "-a -j -w zap-baseline.sarif"
        continue-on-error: true

      - name: Upload ZAP Baseline SARIF
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: zap-baseline.sarif
        continue-on-error: true

      # OWASP ZAP Full Scan (SARIF output)
      - name: OWASP ZAP Full Scan
        uses: zaproxy/action-full-scan@v0.10.0
        with:
          target: "http://localhost:8080"
          cmd_options: "-a -j -w zap-full.sarif"
        continue-on-error: true

      - name: Upload ZAP Full Scan SARIF
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: zap-full.sarif
        continue-on-error: true

      # Upload HTML/JSON reports
      - name: Upload ZAP reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: zap-reports
          path: |
            report_html.html
            report_json.json
            report_md.md

      - name: Cleanup container
        if: always()
        run: |
          docker stop webapp || true
          docker rm webapp || true

  # ==========================
  # Deploy to Amazon ECS
  # ==========================
  deploy:
    name: Deploy to Amazon ECS
    runs-on: ubuntu-latest
    needs: [dast]
    environment: production
    permissions:
      actions: read
      contents: read
      issues: write
      security-events: write

    steps:
      - name: Approval
        uses: trstringer/manual-approval@v1
        with:
          secret: ${{ github.TOKEN }}
          approvers: Kulunu98
          minimum-approvals: 1
          issue-title: "Deploying v1.3.5 to production"
          issue-body: "Please approve or deny the deployment of version v1.3.5."
          timeout-minutes: 3       

      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build and push image
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "image=$ECR_REGISTRY/_
